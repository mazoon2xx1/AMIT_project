
AMIT_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000049e  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000046  00000000  00000000  000004cd  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000513  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001825  00000000  00000000  000005f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d9  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008d8  00000000  00000000  000026f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00002fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e1  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005da  00000000  00000000  000032ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000038c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000418  00000418  0000048c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003988  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.H7sgment_init 0000000a  000003ee  000003ee  00000462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.H7segment_write_number 0000004c  000002b0  000002b0  00000324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.H7segment_Enable_left 00000008  000003f8  000003f8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.H7segment_Disable_left 00000008  00000400  00000400  00000474  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.H7segment_Enable_right 00000008  00000408  00000408  0000047c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.H7segment_Disable_right 00000008  00000410  00000410  00000484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.H7segment_operation 00000094  0000021c  0000021c  00000290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PB_init 00000004  0000041c  0000041c  00000490  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    0000019c  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.init_ADC 0000001a  0000039a  0000039a  0000040e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.ADC_read 00000030  000002fc  000002fc  00000370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.MEEPROM_write 00000018  000003b4  000003b4  00000428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.libgcc.div 00000028  0000032c  0000032c  000003a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.libgcc  0000000c  000003e2  000003e2  00000456  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.libgcc.mul 0000001e  0000037c  0000037c  000003f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.libgcc.div 00000028  00000354  00000354  000003c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_fini 00000002  00000424  00000424  00000498  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_funcs_on_exit 00000002  00000426  00000426  0000049a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_simulator_exit 00000002  00000428  00000428  0000049c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.exit    00000016  000003cc  000003cc  00000440  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text._Exit   00000004  00000420  00000420  00000494  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
   8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
   c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  10:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  14:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  18:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  1c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  20:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  24:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  28:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  2c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  30:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  34:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  38:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  3c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  40:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  44:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  48:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  4c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  50:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
  54:	60 01       	movw	r12, r0
  56:	63 01       	movw	r12, r6
  58:	66 01       	movw	r12, r12
  5a:	69 01       	movw	r12, r18
  5c:	6c 01       	movw	r12, r24
  5e:	6f 01       	movw	r12, r30
  60:	72 01       	movw	r14, r4
  62:	75 01       	movw	r14, r10
  64:	78 01       	movw	r14, r16
  66:	7b 01       	movw	r14, r22

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000418 <__bad_interrupt>:
 418:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.H7sgment_init:

000003ee <H7sgment_init>:
#include <avr/io.h>
#include <avr/delay.h>

void H7sgment_init()
{
	DDRD = 0b00001111;
 3ee:	8f e0       	ldi	r24, 0x0F	; 15
 3f0:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xff;
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	87 bb       	out	0x17, r24	; 23
 3f6:	08 95       	ret

Disassembly of section .text.H7segment_write_number:

000002b0 <H7segment_write_number>:
}
void H7segment_write_number(int number)
{
	switch (number)
 2b0:	8a 30       	cpi	r24, 0x0A	; 10
 2b2:	91 05       	cpc	r25, r1
 2b4:	10 f5       	brcc	.+68     	; 0x2fa <H7segment_write_number+0x4a>
 2b6:	fc 01       	movw	r30, r24
 2b8:	e6 5d       	subi	r30, 0xD6	; 214
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__tablejump2__>
	{
		case 0:
		PORTD = 0b00111111;
 2c0:	8f e3       	ldi	r24, 0x3F	; 63
 2c2:	82 bb       	out	0x12, r24	; 18
		break;
 2c4:	08 95       	ret
		
		case 1:
		PORTD = 0b00000110;
 2c6:	86 e0       	ldi	r24, 0x06	; 6
 2c8:	82 bb       	out	0x12, r24	; 18
		break;
 2ca:	08 95       	ret
		
		case 2:
		PORTD = 0b11011011;
 2cc:	8b ed       	ldi	r24, 0xDB	; 219
 2ce:	82 bb       	out	0x12, r24	; 18
		break;
 2d0:	08 95       	ret
		
		case 3:
		PORTD = 0b11001111;
 2d2:	8f ec       	ldi	r24, 0xCF	; 207
 2d4:	82 bb       	out	0x12, r24	; 18
		break;
 2d6:	08 95       	ret
		
		case 4:
		PORTD = 0b01100110;
 2d8:	86 e6       	ldi	r24, 0x66	; 102
 2da:	82 bb       	out	0x12, r24	; 18
		break;
 2dc:	08 95       	ret
		
		case 5:
		PORTD = 0b01101101;
 2de:	8d e6       	ldi	r24, 0x6D	; 109
 2e0:	82 bb       	out	0x12, r24	; 18
		break;
 2e2:	08 95       	ret
		
		case 6:
		PORTD = 0b01111101;
 2e4:	8d e7       	ldi	r24, 0x7D	; 125
 2e6:	82 bb       	out	0x12, r24	; 18
		break;
 2e8:	08 95       	ret
		
		case 7:
		PORTD = 0b00000111;
 2ea:	87 e0       	ldi	r24, 0x07	; 7
 2ec:	82 bb       	out	0x12, r24	; 18
		break;
 2ee:	08 95       	ret
		
		case 8:
		PORTD = 0b01111111;
 2f0:	8f e7       	ldi	r24, 0x7F	; 127
 2f2:	82 bb       	out	0x12, r24	; 18
		break;
 2f4:	08 95       	ret
		
		case 9:
		PORTD = 0b01100111;
 2f6:	87 e6       	ldi	r24, 0x67	; 103
 2f8:	82 bb       	out	0x12, r24	; 18
 2fa:	08 95       	ret

Disassembly of section .text.H7segment_Enable_left:

000003f8 <H7segment_Enable_left>:
		break;	
	}
}

void H7segment_Enable_left()
{PORTB &= ~(1<<6);}
 3f8:	88 b3       	in	r24, 0x18	; 24
 3fa:	8f 7b       	andi	r24, 0xBF	; 191
 3fc:	88 bb       	out	0x18, r24	; 24
 3fe:	08 95       	ret

Disassembly of section .text.H7segment_Disable_left:

00000400 <H7segment_Disable_left>:
	
void H7segment_Disable_left()
{PORTB |= (1<<6);}
 400:	88 b3       	in	r24, 0x18	; 24
 402:	80 64       	ori	r24, 0x40	; 64
 404:	88 bb       	out	0x18, r24	; 24
 406:	08 95       	ret

Disassembly of section .text.H7segment_Enable_right:

00000408 <H7segment_Enable_right>:
	
void H7segment_Enable_right()
{PORTB &= ~(1<<7);}
 408:	88 b3       	in	r24, 0x18	; 24
 40a:	8f 77       	andi	r24, 0x7F	; 127
 40c:	88 bb       	out	0x18, r24	; 24
 40e:	08 95       	ret

Disassembly of section .text.H7segment_Disable_right:

00000410 <H7segment_Disable_right>:
	
void H7segment_Disable_right()
{PORTB |= (1<<7);}
 410:	88 b3       	in	r24, 0x18	; 24
 412:	80 68       	ori	r24, 0x80	; 128
 414:	88 bb       	out	0x18, r24	; 24
 416:	08 95       	ret

Disassembly of section .text.H7segment_operation:

0000021c <H7segment_operation>:
	
void H7segment_operation(uint16_t number)
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ac 01       	movw	r20, r24
	int right_num;
	int left_num;
		right_num = number%10;
 222:	9c 01       	movw	r18, r24
 224:	ad ec       	ldi	r26, 0xCD	; 205
 226:	bc ec       	ldi	r27, 0xCC	; 204
 228:	0e 94 be 01 	call	0x37c	; 0x37c <__umulhisi3>
 22c:	ec 01       	movw	r28, r24
 22e:	d6 95       	lsr	r29
 230:	c7 95       	ror	r28
 232:	d6 95       	lsr	r29
 234:	c7 95       	ror	r28
 236:	d6 95       	lsr	r29
 238:	c7 95       	ror	r28
 23a:	ce 01       	movw	r24, r28
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	cc 0f       	add	r28, r28
 242:	dd 1f       	adc	r29, r29
 244:	cc 0f       	add	r28, r28
 246:	dd 1f       	adc	r29, r29
 248:	cc 0f       	add	r28, r28
 24a:	dd 1f       	adc	r29, r29
 24c:	c8 0f       	add	r28, r24
 24e:	d9 1f       	adc	r29, r25
 250:	ca 01       	movw	r24, r20
 252:	8c 1b       	sub	r24, r28
 254:	9d 0b       	sbc	r25, r29
 256:	ec 01       	movw	r28, r24
		left_num = number/10;
 258:	0e 94 be 01 	call	0x37c	; 0x37c <__umulhisi3>
		H7segment_write_number(left_num);
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	0e 94 58 01 	call	0x2b0	; 0x2b0 <H7segment_write_number>
		H7segment_Enable_left();
 26c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <H7segment_Enable_left>
		H7segment_Disable_right();
 270:	0e 94 08 02 	call	0x410	; 0x410 <H7segment_Disable_right>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	83 ec       	ldi	r24, 0xC3	; 195
 276:	99 e0       	ldi	r25, 0x09	; 9
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <H7segment_operation+0x5c>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <H7segment_operation+0x62>
 27e:	00 00       	nop
		_delay_ms(10);
		H7segment_Disable_left();
 280:	0e 94 00 02 	call	0x400	; 0x400 <__EEPROM_REGION_LENGTH__>
		H7segment_Disable_right();
 284:	0e 94 08 02 	call	0x410	; 0x410 <H7segment_Disable_right>
		H7segment_write_number(right_num);
 288:	ce 01       	movw	r24, r28
 28a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <H7segment_write_number>
		H7segment_Enable_right();
 28e:	0e 94 04 02 	call	0x408	; 0x408 <H7segment_Enable_right>
		H7segment_Disable_left();
 292:	0e 94 00 02 	call	0x400	; 0x400 <__EEPROM_REGION_LENGTH__>
 296:	83 ec       	ldi	r24, 0xC3	; 195
 298:	99 e0       	ldi	r25, 0x09	; 9
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <H7segment_operation+0x7e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <H7segment_operation+0x84>
 2a0:	00 00       	nop
		_delay_ms(10);
		H7segment_Disable_right();
 2a2:	0e 94 08 02 	call	0x410	; 0x410 <H7segment_Disable_right>
        H7segment_Disable_left();		
 2a6:	0e 94 00 02 	call	0x400	; 0x400 <__EEPROM_REGION_LENGTH__>
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

Disassembly of section .text.PB_init:

0000041c <PB_init>:
#include <avr/delay.h>


void PB_init()
{
	DDRC = 0b00000000;
 41c:	14 ba       	out	0x14, r1	; 20
 41e:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
#include "MCAL/MEEPROM/MEEPROM-interface.h"


int main(void)
{
	DDRA &= ~(1<<0);
  80:	8a b3       	in	r24, 0x1a	; 26
  82:	8e 7f       	andi	r24, 0xFE	; 254
  84:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	87 bb       	out	0x17, r24	; 23
	char first_num;
	char sec_num;
	int right_n;
	int left_n;
	
	PB_init();
  8a:	0e 94 0e 02 	call	0x41c	; 0x41c <PB_init>
    init_ADC();
  8e:	0e 94 cd 01 	call	0x39a	; 0x39a <init_ADC>
	H7sgment_init(); 
  92:	0e 94 f7 01 	call	0x3ee	; 0x3ee <H7sgment_init>
	int button = 0;
	int flag;
	double voltage;
	double temperature;
	int _temperature;
	int average_cel =0;
  96:	a1 2c       	mov	r10, r1
  98:	b1 2c       	mov	r11, r1
int main(void)
{
	DDRA &= ~(1<<0);
	DDRB = 0xff;
	int temp = 60;
	int button = 0;
  9a:	e1 2c       	mov	r14, r1
  9c:	f1 2c       	mov	r15, r1

int main(void)
{
	DDRA &= ~(1<<0);
	DDRB = 0xff;
	int temp = 60;
  9e:	0c e3       	ldi	r16, 0x3C	; 60
  a0:	10 e0       	ldi	r17, 0x00	; 0
    init_ADC();
	H7sgment_init(); 
    while(1)
    {
		
			if (PINC&(1<<2))
  a2:	9a 9b       	sbis	0x13, 2	; 19
  a4:	07 c0       	rjmp	.+14     	; 0xb4 <main+0x34>
			{
				while(PINC&(1<<2));
  a6:	9a 99       	sbic	0x13, 2	; 19
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <main+0x26>
				button =1;
				flag =0;
  aa:	c1 2c       	mov	r12, r1
  ac:	d1 2c       	mov	r13, r1
    {
		
			if (PINC&(1<<2))
			{
				while(PINC&(1<<2));
				button =1;
  ae:	ee 24       	eor	r14, r14
  b0:	e3 94       	inc	r14
  b2:	f1 2c       	mov	r15, r1
				flag =0;
			}
		if ((flag == 0) & (button ==1))
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	c1 14       	cp	r12, r1
  b8:	d1 04       	cpc	r13, r1
  ba:	09 f0       	breq	.+2      	; 0xbe <main+0x3e>
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	e2 16       	cp	r14, r18
  c4:	f1 04       	cpc	r15, r1
  c6:	09 f0       	breq	.+2      	; 0xca <main+0x4a>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	89 23       	and	r24, r25
  cc:	09 f5       	brne	.+66     	; 0x110 <main+0x90>
  ce:	e9 cf       	rjmp	.-46     	; 0xa2 <main+0x22>
		
		{
	
			for (int i=0; i<10 ;i++)
			{
				voltage = (ADC_read(0)/2)*76;
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ADC_read>
  d8:	99 23       	and	r25, r25
  da:	0c f4       	brge	.+2      	; 0xde <main+0x5e>
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	9c 01       	movw	r18, r24
  e0:	35 95       	asr	r19
  e2:	27 95       	ror	r18
  e4:	4c e4       	ldi	r20, 0x4C	; 76
  e6:	42 9f       	mul	r20, r18
  e8:	c0 01       	movw	r24, r0
  ea:	43 9f       	mul	r20, r19
  ec:	90 0d       	add	r25, r0
  ee:	11 24       	eor	r1, r1
				_temperature = (((int)voltage)/84)-1;
  f0:	64 e5       	ldi	r22, 0x54	; 84
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	0e 94 96 01 	call	0x32c	; 0x32c <__divmodhi4>
  f8:	61 50       	subi	r22, 0x01	; 1
  fa:	71 09       	sbc	r23, r1
				average_cel += _temperature;
  fc:	a6 0e       	add	r10, r22
  fe:	b7 1e       	adc	r11, r23
 100:	89 e6       	ldi	r24, 0x69	; 105
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x84>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x8a>
 10a:	00 00       	nop
			}
		if ((flag == 0) & (button ==1))
		
		{
	
			for (int i=0; i<10 ;i++)
 10c:	21 96       	adiw	r28, 0x01	; 1
 10e:	02 c0       	rjmp	.+4      	; 0x114 <main+0x94>
 110:	c0 e0       	ldi	r28, 0x00	; 0
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	ca 30       	cpi	r28, 0x0A	; 10
 116:	d1 05       	cpc	r29, r1
 118:	dc f2       	brlt	.-74     	; 0xd0 <main+0x50>
				voltage = (ADC_read(0)/2)*76;
				_temperature = (((int)voltage)/84)-1;
				average_cel += _temperature;
				_delay_ms(25);
			}
			average_cel /=10;
 11a:	c5 01       	movw	r24, r10
 11c:	6a e0       	ldi	r22, 0x0A	; 10
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	0e 94 96 01 	call	0x32c	; 0x32c <__divmodhi4>
 124:	86 2f       	mov	r24, r22
 126:	97 2f       	mov	r25, r23
 128:	a6 2e       	mov	r10, r22
 12a:	b7 2e       	mov	r11, r23
			H7segment_operation(average_cel);
 12c:	0e 94 0e 01 	call	0x21c	; 0x21c <H7segment_operation>
			
			if ((PINC&(1<<0))|(PINC&(1<<1)))
 130:	93 b3       	in	r25, 0x13	; 19
 132:	83 b3       	in	r24, 0x13	; 19
 134:	91 70       	andi	r25, 0x01	; 1
 136:	82 70       	andi	r24, 0x02	; 2
 138:	89 2b       	or	r24, r25
 13a:	41 f1       	breq	.+80     	; 0x18c <main+0x10c>
			{
				if(PINC & (1<<0))
 13c:	98 9b       	sbis	0x13, 0	; 19
 13e:	05 c0       	rjmp	.+10     	; 0x14a <main+0xca>
				{
					while( PINC&(1<<0));
 140:	98 99       	sbic	0x13, 0	; 19
 142:	fe cf       	rjmp	.-4      	; 0x140 <main+0xc0>
					temp+=5;
 144:	0b 5f       	subi	r16, 0xFB	; 251
 146:	1f 4f       	sbci	r17, 0xFF	; 255
 148:	06 c0       	rjmp	.+12     	; 0x156 <main+0xd6>
				}
				else if(PINC&(1<<1))
 14a:	99 9b       	sbis	0x13, 1	; 19
 14c:	04 c0       	rjmp	.+8      	; 0x156 <main+0xd6>
				{
					while(PINC&(1<<1));
 14e:	99 99       	sbic	0x13, 1	; 19
 150:	fe cf       	rjmp	.-4      	; 0x14e <main+0xce>
					temp -=5;
 152:	05 50       	subi	r16, 0x05	; 5
 154:	11 09       	sbc	r17, r1
				}
				if ((temp>=35)&&(temp<=75))
 156:	90 2e       	mov	r9, r16
 158:	81 2e       	mov	r8, r17
 15a:	c8 01       	movw	r24, r16
 15c:	83 97       	sbiw	r24, 0x23	; 35
 15e:	89 97       	sbiw	r24, 0x29	; 41
 160:	80 f0       	brcs	.+32     	; 0x182 <main+0x102>
 162:	14 c0       	rjmp	.+40     	; 0x18c <main+0x10c>
				{
					for(int i=0 ; i<5 ; i++)
					{
						H7segment_operation(temp);
 164:	89 2d       	mov	r24, r9
 166:	98 2d       	mov	r25, r8
 168:	0e 94 0e 01 	call	0x21c	; 0x21c <H7segment_operation>
 16c:	9f e3       	ldi	r25, 0x3F	; 63
 16e:	2d e0       	ldi	r18, 0x0D	; 13
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	91 50       	subi	r25, 0x01	; 1
 174:	20 40       	sbci	r18, 0x00	; 0
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0xf2>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0xfc>
 17c:	00 00       	nop
					while(PINC&(1<<1));
					temp -=5;
				}
				if ((temp>=35)&&(temp<=75))
				{
					for(int i=0 ; i<5 ; i++)
 17e:	21 96       	adiw	r28, 0x01	; 1
 180:	02 c0       	rjmp	.+4      	; 0x186 <main+0x106>
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	d0 e0       	ldi	r29, 0x00	; 0
 186:	c5 30       	cpi	r28, 0x05	; 5
 188:	d1 05       	cpc	r29, r1
 18a:	64 f3       	brlt	.-40     	; 0x164 <main+0xe4>
						_delay_ms(1000);            //1000
				}
			}
				}
			
			if (average_cel < temp-5)
 18c:	c8 01       	movw	r24, r16
 18e:	05 97       	sbiw	r24, 0x05	; 5
 190:	a8 16       	cp	r10, r24
 192:	b9 06       	cpc	r11, r25
 194:	8c f4       	brge	.+34     	; 0x1b8 <main+0x138>
			{
				PORTB |= (1<<0);
 196:	88 b3       	in	r24, 0x18	; 24
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	88 bb       	out	0x18, r24	; 24
				PORTB &= ~(1<<2); 
 19c:	88 b3       	in	r24, 0x18	; 24
 19e:	8b 7f       	andi	r24, 0xFB	; 251
 1a0:	88 bb       	out	0x18, r24	; 24
				PORTB ^= (1<<1);
 1a2:	98 b3       	in	r25, 0x18	; 24
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	89 27       	eor	r24, r25
 1a8:	88 bb       	out	0x18, r24	; 24
 1aa:	89 e6       	ldi	r24, 0x69	; 105
 1ac:	98 e1       	ldi	r25, 0x18	; 24
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x12e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x134>
 1b4:	00 00       	nop
 1b6:	15 c0       	rjmp	.+42     	; 0x1e2 <main+0x162>
				_delay_ms(25);     //1000
				                 
			}
			else if (average_cel==temp)
 1b8:	0a 15       	cp	r16, r10
 1ba:	1b 05       	cpc	r17, r11
 1bc:	21 f4       	brne	.+8      	; 0x1c6 <main+0x146>
			{
				PORTB &= ~(1<<1);
 1be:	88 b3       	in	r24, 0x18	; 24
 1c0:	8d 7f       	andi	r24, 0xFD	; 253
 1c2:	88 bb       	out	0x18, r24	; 24
 1c4:	0e c0       	rjmp	.+28     	; 0x1e2 <main+0x162>
			}
			else if (average_cel > temp+5)
 1c6:	c8 01       	movw	r24, r16
 1c8:	05 96       	adiw	r24, 0x05	; 5
 1ca:	8a 15       	cp	r24, r10
 1cc:	9b 05       	cpc	r25, r11
 1ce:	4c f4       	brge	.+18     	; 0x1e2 <main+0x162>
			{
				PORTB &= ~(1<<0);
 1d0:	88 b3       	in	r24, 0x18	; 24
 1d2:	8e 7f       	andi	r24, 0xFE	; 254
 1d4:	88 bb       	out	0x18, r24	; 24
				PORTB |= (1<<2);
 1d6:	88 b3       	in	r24, 0x18	; 24
 1d8:	84 60       	ori	r24, 0x04	; 4
 1da:	88 bb       	out	0x18, r24	; 24
				PORTB |= (1<<1);
 1dc:	88 b3       	in	r24, 0x18	; 24
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	88 bb       	out	0x18, r24	; 24
			}
						//first_num = MEEPROM_read(0x00) - '0';
						//sec_num = MEEPROM_read(0x01) - '0';
						//temp = (first_num * 10) + sec_num;
			if ((PINC&(1<<2)))
 1e2:	9a 9b       	sbis	0x13, 2	; 19
 1e4:	5e cf       	rjmp	.-324    	; 0xa2 <main+0x22>
			{
				while(PINC&(1<<2));
 1e6:	9a 99       	sbic	0x13, 2	; 19
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <main+0x166>
				DDRD = 0x00;
 1ea:	11 ba       	out	0x11, r1	; 17
				button = 0;
				flag = 1;
				DDRB = 0x00;
 1ec:	17 ba       	out	0x17, r1	; 23
				
					right_n = temp%10;
 1ee:	c8 01       	movw	r24, r16
 1f0:	6a e0       	ldi	r22, 0x0A	; 10
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	0e 94 96 01 	call	0x32c	; 0x32c <__divmodhi4>
 1f8:	c8 2f       	mov	r28, r24
					left_n = temp/10;
				MEEPROM_write(0x00 ,(left_n+'0'));
 1fa:	60 5d       	subi	r22, 0xD0	; 208
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 da 01 	call	0x3b4	; 0x3b4 <MEEPROM_write>
				MEEPROM_write(0x01 ,(right_n+'0'));
 204:	60 e3       	ldi	r22, 0x30	; 48
 206:	6c 0f       	add	r22, r28
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <MEEPROM_write>
			if ((PINC&(1<<2)))
			{
				while(PINC&(1<<2));
				DDRD = 0x00;
				button = 0;
				flag = 1;
 210:	cc 24       	eor	r12, r12
 212:	c3 94       	inc	r12
 214:	d1 2c       	mov	r13, r1
						//temp = (first_num * 10) + sec_num;
			if ((PINC&(1<<2)))
			{
				while(PINC&(1<<2));
				DDRD = 0x00;
				button = 0;
 216:	e1 2c       	mov	r14, r1
 218:	f1 2c       	mov	r15, r1
 21a:	43 cf       	rjmp	.-378    	; 0xa2 <main+0x22>

Disassembly of section .text.init_ADC:

0000039a <init_ADC>:
#include <stdlib.h>
#include "MADC_interface.h"

void init_ADC(void)
{
	ADMUX  |= (1<<REFS0);   //voltage reference from internal (REFS1(bit no. 7) ,, REFS0(bit no. 6))
 39a:	87 b1       	in	r24, 0x07	; 7
 39c:	80 64       	ori	r24, 0x40	; 64
 39e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN);    // turn on ADC (bit no. 7)
 3a0:	86 b1       	in	r24, 0x06	; 6
 3a2:	80 68       	ori	r24, 0x80	; 128
 3a4:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADSC);
 3a6:	86 b1       	in	r24, 0x06	; 6
 3a8:	80 64       	ori	r24, 0x40	; 64
 3aa:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));  //8MHZ/128 = 62,500HZ the ADC reference clock
 3ac:	86 b1       	in	r24, 0x06	; 6
 3ae:	87 60       	ori	r24, 0x07	; 7
 3b0:	86 b9       	out	0x06, r24	; 6
 3b2:	08 95       	ret

Disassembly of section .text.ADC_read:

000002fc <ADC_read>:
}
uint16_t ADC_read(int channel)
{
	int Ain;
	int Ainlow;
	ADMUX &= 0xF0;                    // clear the older channel that was read
 2fc:	97 b1       	in	r25, 0x07	; 7
 2fe:	90 7f       	andi	r25, 0xF0	; 240
 300:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;                // Defines the new ADC channel to be read
 302:	97 b1       	in	r25, 0x07	; 7
 304:	89 2b       	or	r24, r25
 306:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);            //start a new conversion (single conversion)
 308:	86 b1       	in	r24, 0x06	; 6
 30a:	80 64       	ori	r24, 0x40	; 64
 30c:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADSC))==1);   //wait until the conversion is done
 30e:	86 b1       	in	r24, 0x06	; 6
 310:	83 ec       	ldi	r24, 0xC3	; 195
 312:	99 e0       	ldi	r25, 0x09	; 9
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <ADC_read+0x18>
 318:	00 c0       	rjmp	.+0      	; 0x31a <ADC_read+0x1e>
 31a:	00 00       	nop
	_delay_ms(10);
	Ainlow = (int) ADCL;
 31c:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;
 31e:	85 b1       	in	r24, 0x05	; 5
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	98 2f       	mov	r25, r24
 324:	88 27       	eor	r24, r24
	Ain = Ain + Ainlow;
	return Ain;
	
}
 326:	82 0f       	add	r24, r18
 328:	91 1d       	adc	r25, r1
 32a:	08 95       	ret

Disassembly of section .text.MEEPROM_write:

000003b4 <MEEPROM_write>:
#include <avr/delay.h>


void MEEPROM_write(unsigned int EAddress , unsigned char Data)
{
	while (EECR & (1<<EEWE));
 3b4:	e1 99       	sbic	0x1c, 1	; 28
 3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <MEEPROM_write>
	
	EEAR = EAddress;
 3b8:	9f bb       	out	0x1f, r25	; 31
 3ba:	8e bb       	out	0x1e, r24	; 30
	EEDR = Data;
 3bc:	6d bb       	out	0x1d, r22	; 29
	
	EECR |= (1<<EEMWE);
 3be:	8c b3       	in	r24, 0x1c	; 28
 3c0:	84 60       	ori	r24, 0x04	; 4
 3c2:	8c bb       	out	0x1c, r24	; 28
	EECR |= (EEWE);
 3c4:	8c b3       	in	r24, 0x1c	; 28
 3c6:	81 60       	ori	r24, 0x01	; 1
 3c8:	8c bb       	out	0x1c, r24	; 28
 3ca:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000032c <__divmodhi4>:
 32c:	97 fb       	bst	r25, 7
 32e:	07 2e       	mov	r0, r23
 330:	16 f4       	brtc	.+4      	; 0x336 <__divmodhi4+0xa>
 332:	00 94       	com	r0
 334:	07 d0       	rcall	.+14     	; 0x344 <__divmodhi4_neg1>
 336:	77 fd       	sbrc	r23, 7
 338:	09 d0       	rcall	.+18     	; 0x34c <__divmodhi4_neg2>
 33a:	0e 94 aa 01 	call	0x354	; 0x354 <__udivmodhi4>
 33e:	07 fc       	sbrc	r0, 7
 340:	05 d0       	rcall	.+10     	; 0x34c <__divmodhi4_neg2>
 342:	3e f4       	brtc	.+14     	; 0x352 <__divmodhi4_exit>

00000344 <__divmodhi4_neg1>:
 344:	90 95       	com	r25
 346:	81 95       	neg	r24
 348:	9f 4f       	sbci	r25, 0xFF	; 255
 34a:	08 95       	ret

0000034c <__divmodhi4_neg2>:
 34c:	70 95       	com	r23
 34e:	61 95       	neg	r22
 350:	7f 4f       	sbci	r23, 0xFF	; 255

00000352 <__divmodhi4_exit>:
 352:	08 95       	ret

Disassembly of section .text.libgcc:

000003e2 <__tablejump2__>:
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	05 90       	lpm	r0, Z+
 3e8:	f4 91       	lpm	r31, Z
 3ea:	e0 2d       	mov	r30, r0
 3ec:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

0000037c <__umulhisi3>:
 37c:	a2 9f       	mul	r26, r18
 37e:	b0 01       	movw	r22, r0
 380:	b3 9f       	mul	r27, r19
 382:	c0 01       	movw	r24, r0
 384:	a3 9f       	mul	r26, r19
 386:	70 0d       	add	r23, r0
 388:	81 1d       	adc	r24, r1
 38a:	11 24       	eor	r1, r1
 38c:	91 1d       	adc	r25, r1
 38e:	b2 9f       	mul	r27, r18
 390:	70 0d       	add	r23, r0
 392:	81 1d       	adc	r24, r1
 394:	11 24       	eor	r1, r1
 396:	91 1d       	adc	r25, r1
 398:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000354 <__udivmodhi4>:
 354:	aa 1b       	sub	r26, r26
 356:	bb 1b       	sub	r27, r27
 358:	51 e1       	ldi	r21, 0x11	; 17
 35a:	07 c0       	rjmp	.+14     	; 0x36a <__udivmodhi4_ep>

0000035c <__udivmodhi4_loop>:
 35c:	aa 1f       	adc	r26, r26
 35e:	bb 1f       	adc	r27, r27
 360:	a6 17       	cp	r26, r22
 362:	b7 07       	cpc	r27, r23
 364:	10 f0       	brcs	.+4      	; 0x36a <__udivmodhi4_ep>
 366:	a6 1b       	sub	r26, r22
 368:	b7 0b       	sbc	r27, r23

0000036a <__udivmodhi4_ep>:
 36a:	88 1f       	adc	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	5a 95       	dec	r21
 370:	a9 f7       	brne	.-22     	; 0x35c <__udivmodhi4_loop>
 372:	80 95       	com	r24
 374:	90 95       	com	r25
 376:	bc 01       	movw	r22, r24
 378:	cd 01       	movw	r24, r26
 37a:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000424 <_fini>:
 424:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000426 <__funcs_on_exit>:
 426:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000428 <__simulator_exit>:
 428:	08 95       	ret

Disassembly of section .text.exit:

000003cc <exit>:
 3cc:	ec 01       	movw	r28, r24
 3ce:	0e 94 13 02 	call	0x426	; 0x426 <__funcs_on_exit>
 3d2:	0e 94 12 02 	call	0x424	; 0x424 <_fini>
 3d6:	ce 01       	movw	r24, r28
 3d8:	0e 94 14 02 	call	0x428	; 0x428 <__simulator_exit>
 3dc:	ce 01       	movw	r24, r28
 3de:	0e 94 10 02 	call	0x420	; 0x420 <_Exit>

Disassembly of section .text._Exit:

00000420 <_Exit>:
 420:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
